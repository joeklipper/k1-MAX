# K1
# CreateDate: 2023/03/21

[gcode_macro PRINT_START]
variable_bed_temp: 100
variable_extruder_temp: 240
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(105)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(245)|float %}
    M140 S{bed_temp}                                                                # start heating bed dont wait
    m104 S{extruder_temp}                                                           # start heating nozzle dont wait
    G28                                                                             # home all axis                                                                       # wait required to allow the camera services to close
    BED_MESH_CLEAR                                                                  # clear current mesh
    G4 P500                                                                         # wait required to prevent MCU overload / inconsistant meshing
    SET_VELOCITY_LIMIT ACCEL=15000 ACCEL_TO_DECEL=10000 SQUARE_CORNER_VELOCITY=25   # drop accels to prevent hyper agressive meshing
    BED_MESH_CALIBRATE                                                              # start bedmesh calibrate
    G4 P500                                                                         # wait required to prevent MCU overload / inconsistant mesh calculation
      _SMART_PARK                                                                     # park the printhead near the print area
    SET_VELOCITY_LIMIT ACCEL=18000 ACCEL_TO_DECEL=10000 SQUARE_CORNER_VELOCITY=5    # up acceleration back to slightly below regular travel speeds
    M190 S{bed_temp}                                                                # wait for bed temperature before next step
    M109 S{extruder_temp}                                                           # wait for nozzle temperature before next step
      _LINE_PURGE                                                                      # create purge line near the print area of the part
    {action_respond_info("Happy Printing!")}                                        # happy printing~

[gcode_macro END_PRINT]
gcode:  
  SET_PIN PIN=Side_Fan VALUE=1  ; Turn on Side Fan at full speed (255)
  {% set th = printer.toolhead %}
  {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
  {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
  {% set z_safe = [th.position.z + 15, th.axis_maximum.z]|min %}
  M400                           ; wait for buffer to clear
  G92 E0                         ; zero the extruder
  G1 E-2.0 F3600 
  M220 S100
  M204 S500
  TURN_OFF_HEATERS
  G90                                      ; absolute positioning
  G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
  G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
  M107 S0
  TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=35  ; Wait until bed temperature drops to 35ºC
  SET_PIN PIN=Side_Fan VALUE=0  ; Turn off Side Fan
  
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        SET_FILAMENT_SENSOR SENSOR=Encoder_Sensor ENABLE=0                                  ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)
    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=Encoder_Sensor ENABLE=1                          ; enable filament sensor
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}


[gcode_macro INPUTSHAPER]
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}
  SET_FILAMENT_SENSOR SENSOR=Encoder_Sensor ENABLE=0
  G90
  G28
  {% set POSITION_X = printer.configfile.settings['stepper_x'].position_max/2 %}
  {% set POSITION_Y = printer.configfile.settings['stepper_y'].position_max/2 %}
  G1 X{POSITION_X} Y{POSITION_Y} F6000
  G1 Z10 F600
  SHAPER_CALIBRATE
  SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1

[gcode_macro TUNOFFINPUTSHAPER]
gcode:
  SET_INPUT_SHAPER SHAPER_FREQ_X=0 SHAPER_FREQ_Y=0

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  END_PRINT
  CANCEL_PRINT_BASE

[gcode_macro M141]
description: Set Chamber Temperature with slicers
gcode:
  {% set s = params.S|float %}
  SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=chamber_fan TARGET={s}
  { action_respond_info("Chamber target temperature: %s°C" % (s)) }

[gcode_macro M191]
description: Wait for Chamber Temperature to heat up
gcode:
  {% set s = params.S|float %}
  {% set chamber_temp = printer["temperature_sensor chamber_temp"].temperature|float %}
  {% if s > 0 %}
    M141 S{s}
  {% endif %}
  {% if s > chamber_temp and s <= 90 %}
    M140 S100
    { action_respond_info("Waiting for the bed to heat up the chamber...") }
    TEMPERATURE_WAIT SENSOR="temperature_fan chamber_fan" MINIMUM={s-1}
    { action_respond_info("Chamber target temperature reached: %s°C" % (s)) }
    M140 S{s}
  {% endif %}

  [gcode_macro SET_E_MIN_CURRENT]
gcode:
  {% set e_current = printer['gcode_macro PRINTER_PARAM'].e_min_current %}
  M400
  SET_TMC_CURRENT STEPPER=extruder CURRENT={e_current} HOLDCURRENT={e_current}
  G4 P2000

[gcode_macro RESTORE_E_CURRENT]
gcode:
  {% set e_current = printer.configfile.settings['tmc2209 extruder'].run_current %}
  M400
  SET_TMC_CURRENT STEPPER=extruder CURRENT={e_current} HOLDCURRENT={e_current}
  G4 P2000

[delayed_gcode DISABLEFILAMENTSENSOR]
initial_duration: 1
gcode:
    SET_FILAMENT_SENSOR SENSOR=Encoder_Sensor ENABLE=0

    
[gcode_macro M600]
gcode:
    #LCDRGB R=1 G=0 B=0  ; Turn LCD Red
    PAUSE                ; Pause

[gcode_macro LOAD_FILAMENT]
variable_load_distance:  50
variable_purge_distance:  30
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=load_state
    G91
    G92 E0
    G1 E{load_distance} F{max_velocity} # fast-load
    G1 E{purge_distance} F{speed} # purge
    RESTORE_GCODE_STATE NAME=load_state

    [gcode_macro UNLOAD_FILAMENT]
variable_unload_distance:  50
variable_purge_distance:  30
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=unload_state
    G91
    G92 E0
    G1 E{purge_distance} F{speed} # purge
    G1 E-{unload_distance} F{max_velocity} # fast-unload
    RESTORE_GCODE_STATE NAME=unload_state
  
######################################
#                                    #
#    PPPP     IIIII       DDDD       # 
#    P  PP      I         D   D      #
#    PPPP       I         D    D     #
#    P          I         D   D      #
#    P        IIIII       DDDD       #
#                                    #
######################################

[gcode_macro APID_HOTEND220]
gcode:
  PID_CALIBRATE HEATER=extruder TARGET=240
  SAVE_CONFIG


[gcode_macro APID_HOTEND230]
gcode:
  PID_CALIBRATE HEATER=extruder TARGET=260
  SAVE_CONFIG


[gcode_macro APID_HOTEND255]
gcode:
  PID_CALIBRATE HEATER=extruder TARGET=270
  SAVE_CONFIG

  
[gcode_macro APID_HOTEND300]
gcode:
  PID_CALIBRATE HEATER=extruder TARGET=280
  SAVE_CONFIG


[gcode_macro APID_HOTEND350]
gcode:
  PID_CALIBRATE HEATER=extruder TARGET=290
  SAVE_CONFIG


[gcode_macro ABEDPID100]
gcode:
  PID_CALIBRATE HEATER=heater_bed TARGET=100
  SAVE_CONFIG


[gcode_macro ABEDPID65]
gcode:
  PID_CALIBRATE HEATER=heater_bed TARGET=65
  SAVE_CONFIG